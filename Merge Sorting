public class MergeSorting {
    public static void printArray(int arr[]){
        for(int i=0; i<arr.length; i++){
          System.out.print(arr[i] + " ");
        }
        System.out.println();
   }
    public static void mergeSort(int arr[] , int si , int ei){
        // Base Case
        if(si >= ei){
            return;
        }
        // Kaam 
        int mid = si + (ei-si)/2; // mid
        mergeSort(arr, si, mid); // Left MergeSorting
        mergeSort(arr, mid+1, ei); // Right MergeSorting
        merge(arr, si, mid, ei); 
    }
    public static void merge(int arr[] , int si , int mid , int ei){
        // left(0,3) = 4  , right(4,6) = 3  -> 6-0+1=7  
        int temp[] = new int[ei-si+1];
        int i = si;  // iterator for left part
        int j = mid+1; // iterator for right part
        int k = 0; // iterator for temporary array

        while(i<=mid && j<=ei){
          if(arr[i] < arr[j]){
            temp[k] = arr[i];
            i++;
          } else {
            temp[k] = arr[j];
            j++;
          }
          k++;
    }
      // Left Part
       while(i<=mid){
         temp[k++] = arr[i++];
       }
      // Right Part
       while(j<=ei){
         temp[k++] = arr[j++];
       }
    // Copy temporary int original array
       for(k=0, i=si; k<temp.length; k++, i++){
        arr[i] = temp[k];
    }
}
  public static void main(String args[]){
     int arr[] = {6,3,9,5,2,8};
     mergeSort(arr,0,arr.length-1);
     printArray(arr);
  }
}
// Time Complexity = o(nlogn) as best time complexity
// Space Complexity = o(n) as worst space complexity
 